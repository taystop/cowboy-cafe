/*
 * Author: Tayler Stoppel
 * Class: Order.cs
 * Purpose: A class to represent an order generated by the user.
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;

namespace CowboyCafe.Data
{
    public class Order : INotifyPropertyChanged
    {
        /// <summary>
        /// Static variable holding the value of the last used order number.
        /// </summary>
        private static uint LastOrderNumber = 1;

        /// <summary>
        /// The items in the order.
        /// </summary>
        private List<IOrderItem> items = new List<IOrderItem>();
        public IEnumerable<IOrderItem> Items => items.ToArray();

        /// <summary>
        /// The running total price of all items.
        /// </summary>
        private double subtotal = 0;
        public double Subtotal
        {
            private set { }
            get
            {
                return subtotal;
            }
        }


        /// <summary>
        /// The number of the order.
        /// </summary>
        private uint orderNumber;
        public uint OrderNumber => orderNumber;

        /// <summary>
        /// Event handler for property changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Constructor for the order.
        /// </summary>
        public Order()
        {
            orderNumber = LastOrderNumber++;
        }

        /// <summary>
        /// Adds an order item into the order list adding it's price to the subtotal.
        /// </summary>
        /// <param name="item">The OrderItem to add.</param>
        public void Add(IOrderItem item)
        {
            if(item != null)
            {
                subtotal += item.Price;
                items.Add(item);
                item.PropertyChanged += OnItemChanged;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Items"));
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Price"));
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Subtotal"));
            }
        }

        /// <summary>
        /// Removes an order item from the order list and subtracts it's price from the subtotal.
        /// </summary>
        /// <param name="item">The item to be removed.</param>
        public void Remove(IOrderItem item)
        {
            if(item != null)
            {
                subtotal -= item.Price;
                items.Remove(item);
                item.PropertyChanged -= OnItemChanged;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Items"));
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Price"));
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Subtotal"));
            }
        }

        private void OnItemChanged(object sender, PropertyChangedEventArgs e)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Items"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Price"));
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Subtotal"));
        }

        /// <summary>
        /// Inspired by Zachary's order helper function, helps change the subtotal
        /// </summary>
        /// <param name="item">item who has a size change.</param>
        public void SubHelp(IOrderItem item, Size size)
        {
            Subtotal -= item.Price;
            if(item is Side sid)
            {
                sid.Size = size;
                Subtotal += sid.Price;
            }
            if(item is Drink drin)
            {
                drin.Size = size;
                Subtotal += drin.Price;
            }
        }
    }
}
